// 취약점별 결과 렌더링 모듈
class VulnerabilityRenderer {

    // SQL Injection 결과 렌더링
    static renderSQLInjection(result) {
        const { data, mode, language, requestData } = result;
        const server = SERVERS[language];
        const isVulnerable = mode === 'vulnerable';

        // 공격 성공 여부 판단
        const attackSuccess = data?.result?.authentication_bypassed ||
                             data?.data?.attack_success ||
                             data?.success === true;

        return `
            <div class="vulnerability-section">
                <h4>💉 SQL Injection 분석</h4>

                ${isVulnerable && attackSuccess ? `
                    <div class="alert alert-danger">
                        <strong>⚠️ 인증 우회 성공!</strong> SQL 인젝션으로 로그인을 우회했습니다.
                    </div>
                ` : ''}

                <div class="code-section">
                    <h5>📝 취약한 코드 예시</h5>
                    <pre><code class="language-sql">-- 취약한 쿼리 (사용자 입력 직접 삽입)
SELECT * FROM users
WHERE username = '${requestData.username}'
  AND password = '${requestData.password}'

-- 실제 실행된 쿼리 (인젝션 적용됨)
SELECT * FROM users
WHERE username = 'admin' OR '1'='1'
  AND password = '' OR '1'='1'</code></pre>
                </div>

                <div class="analysis-section">
                    <h5>🔍 취약점 분석</h5>
                    <ul>
                        <li><strong>원인:</strong> 사용자 입력을 SQL 쿼리에 직접 삽입</li>
                        <li><strong>공격 벡터:</strong> OR 조건으로 인증 우회</li>
                        <li><strong>위험도:</strong> 높음 (데이터베이스 전체 접근 가능)</li>
                    </ul>
                </div>

                <div class="mitigation-section">
                    <h5>🛡️ 보안 대책</h5>
                    <pre><code class="language-php">// 안전한 코드 (Prepared Statement)
$stmt = $pdo->prepare("SELECT * FROM users WHERE username = ? AND password = ?");
$stmt->execute([$username, $password]);</code></pre>
                </div>
            </div>
        `;
    }

    // XSS 결과 렌더링
    static renderXSS(result) {
        const { data, mode, language, requestData } = result;
        const server = SERVERS[language];
        const isVulnerable = mode === 'vulnerable';

        const xssDetected = data?.result?.xss_detected;
        const htmlOutput = data?.result?.html_output;
        const riskLevel = data?.analysis?.risk_level || 'medium';

        return `
            <div class="vulnerability-section">
                <h4>🔥 Cross-Site Scripting (XSS) 분석</h4>

                ${isVulnerable && xssDetected ? `
                    <div class="alert alert-danger">
                        <strong>⚠️ XSS 취약점 발견!</strong> 악성 스크립트가 실행될 수 있습니다.
                    </div>
                ` : ''}

                ${isVulnerable && htmlOutput ? `
                    <div class="xss-preview">
                        <h5>🎯 XSS 실행 결과</h5>
                        <div class="xss-demo-container">
                            <div class="demo-label">서버에서 처리된 결과:</div>
                            <div class="xss-output">${htmlOutput}</div>
                            <div class="xss-live-demo">
                                <strong>⚠️ 실제 XSS 실행:</strong>
                                <div class="xss-execution-area">${htmlOutput}</div>
                            </div>
                        </div>
                    </div>
                ` : ''}

                <div class="code-section">
                    <h5>📝 취약한 코드 예시</h5>
                    <pre><code class="language-php">// 취약한 코드 (입력값 직접 출력)
echo "<div>사용자 입력: " . $_POST['search'] . "</div>";

// 사용자가 입력한 값: ${requestData.payload}
// 결과: ${htmlOutput}</code></pre>
                </div>

                <div class="analysis-section">
                    <h5>🔍 페이로드 분석</h5>
                    ${this.renderPayloadAnalysis(data?.analysis?.payload_analysis)}
                </div>

                <div class="mitigation-section">
                    <h5>🛡️ 보안 대책</h5>
                    <pre><code class="language-php">// 안전한 코드 (HTML 이스케이프)
echo "<div>사용자 입력: " . htmlspecialchars($_POST['search'], ENT_QUOTES, 'UTF-8') . "</div>";

// 또는 템플릿 엔진 사용
echo $twig->render('search.html', ['query' => $search]);</code></pre>
                </div>

                <div class="recommendations-section">
                    <h5>💡 권장사항</h5>
                    ${this.renderRecommendations(data?.analysis?.recommendations)}
                </div>
            </div>
        `;
    }

    // 페이로드 분석 렌더링
    static renderPayloadAnalysis(analysis) {
        if (!analysis) return '<p>분석 데이터 없음</p>';

        return `
            <div class="payload-analysis">
                <div class="analysis-grid">
                    <div class="analysis-item">
                        <span class="label">페이로드 길이:</span>
                        <span class="value">${analysis.length} 문자</span>
                    </div>
                    <div class="analysis-item">
                        <span class="label">스크립트 태그:</span>
                        <span class="value ${analysis.contains_script_tags ? 'danger' : 'safe'}">
                            ${analysis.contains_script_tags ? '⚠️ 포함' : '✅ 없음'}
                        </span>
                    </div>
                    <div class="analysis-item">
                        <span class="label">이벤트 핸들러:</span>
                        <span class="value">${analysis.contains_event_handlers} 개</span>
                    </div>
                    <div class="analysis-item">
                        <span class="label">인코딩 상태:</span>
                        <span class="value">
                            ${analysis.encoding_detected?.url_encoded ? 'URL 인코딩 ' : ''}
                            ${analysis.encoding_detected?.html_entities ? 'HTML 엔티티 ' : ''}
                            ${!analysis.encoding_detected?.url_encoded && !analysis.encoding_detected?.html_entities ? '인코딩 없음' : ''}
                        </span>
                    </div>
                </div>
            </div>
        `;
    }

    // 권장사항 렌더링
    static renderRecommendations(recommendations) {
        if (!recommendations) return '<p>권장사항 없음</p>';

        return `
            <ul class="recommendations-list">
                <li><strong>입력 검증:</strong> ${recommendations.input_validation}</li>
                <li><strong>출력 인코딩:</strong> ${recommendations.output_encoding}</li>
                <li><strong>CSP 헤더:</strong> ${recommendations.csp_headers}</li>
                <li><strong>보안 프레임워크:</strong> ${recommendations.secure_frameworks}</li>
            </ul>
        `;
    }


    // 메인 렌더링 함수
    static render(result) {
        const { vulnerability } = result;

        switch (vulnerability) {
            case 'sql-injection':
                return this.renderSQLInjection(result);
            case 'xss':
                return this.renderXSS(result);
            default:
                return `<div>알 수 없는 취약점 유형: ${vulnerability}</div>`;
        }
    }
}